// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import java.util.Arrays;
import java.util.List;

import edu.wpi.first.math.geometry.Translation3d;
import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide
 * numerical or boolean
 * constants. This class should not be used for any other purpose. All constants
 * should be
 * declared globally (i.e. public static). Do not put anything functional in
 * this class.
 *
 * <p>
 * It is advised to statically import this class (or one of its inner classes)
 * wherever the
 * constants are needed, to reduce verbosity.
 */
public class Constants {
  // Hardware Ports
  public static final int LEFT_DRIVE_MOTOR_1 = 15;
  public static final int LEFT_DRIVE_MOTOR_2 = 14;
  public static final int RIGHT_DRIVE_MOTOR_1 = 12;
  public static final int RIGHT_DRIVE_MOTOR_2 = 13;
  public static final int INTAKE_MOTOR = 10;
  public static final int SHOOTER_MOTOR_L = 4; // To be changed
  public static final int SHOOTER_MOTOR_R = 5; // To be changed
  public static final int RAISE_INTAKE_MOTOR = 11; // To be changed when we know the port of raiseIntakeMotor
  public static final int MIDTAKE_MOTOR = 7; // To be changed when we have an actual intake
  public static final int STAR_WHEELS_MOTOR_L = 8;
  public static final int STAR_WHEELS_MOTOR_R = 9;

  // Slowmotion, deadzone, etc:
  public static final double SLOW_MODE_FACTOR = 0.5;
  public static final double DEADZONE = 0.15;
  public static final double AUTO_SPEED = 0.15;

  // Intake Constants

  public static final double RUNNING_SPEED = 0.4;
  public static final double RAISE_SPEED = 0.35;
  public static final double CURRENT_ZONE_AMPS = 1; // To be changed when we have an actual intake
  public static final double INTAKE_UP_POSITION = 1; // To be changed when we have an actual intake
  public static final double INTAKE_DOWN_POSITION = -1; // To be changed when we have an actual intake
  public static final double INTAKE_CHANGE_POSITION = 20;

  // for LED system
  public static final int LED_STRIP_LENGTH = 60;// the number of LEDs on each of the LED strips.
  // public static final int LEDPort1=0;
  // public static final int LEDPort2=0;//neither of these are known currently,
  // but they can be uncommented once we know the port numbers.

  // Shooting constants
  public static final double SHOOTER_ANGLE = 45; // To be changed
  public static final double GRAVITY = 9.8; // If you can figure out a way to change this one, that's impressive
  public static final double SHOOTER_FROM_GROUND = 1; // To be changed
  public static final double MOTOR_SPEED_TO_VELOCITY = 0; // To be changed
  public static final double MIDDLE_HEIGHT = 23.5 * 0.0254;
  public static final double MIDDLE_X = 24.25 * 0.0254;
  // Blue Side
  public static final double Y1 = 43.125 * 0.0254;
  public static final double Y2 = 108.5 * 0.0254;
  public static final double Y3 = 174.625 * 0.0254;
  public static final Translation3d MC1 = new Translation3d(MIDDLE_X, Y1, MIDDLE_HEIGHT);
  public static final Translation3d MC2 = new Translation3d(MIDDLE_X, Y1, MIDDLE_HEIGHT);
  public static final Translation3d MC3 = new Translation3d(MIDDLE_X, Y3, MIDDLE_HEIGHT);
  public static List<Translation3d> MIDDLE_SPOTS = Arrays.asList(MC1, MC2, MC3);

  public static final double HIGH_HEIGHT = 35.5 * 0.0254;
  public static final double HIGH_X = 12.25 * 0.0254;
  // Blue Side
  public static final Translation3d HC1 = new Translation3d(HIGH_X, Y1, HIGH_HEIGHT);
  public static final Translation3d HC2 = new Translation3d(HIGH_X, Y1, HIGH_HEIGHT);
  public static final Translation3d HC3 = new Translation3d(HIGH_X, Y3, HIGH_HEIGHT);
  public static List<Translation3d> HIGH_SPOTS = Arrays.asList(HC1, HC2, HC3);

  // Encoder Values
  public static final double RIGHT_ENCODER_ROTATIONS_TO_DISTANCE = 0;
  public static final double LEFT_ENCODER_ROTATIONS_TO_DISTANCE = 0;

  // Path Folowing Values TO BE CHANGED
  public static final double ks_VOLTS = 0;
  public static final double kv_VOLT_SECONDS_PER_METER = 0;
  public static final double ka_VOLT_SECONDS_SQUARED_PERMETER = 0;
  public static final double kp_DRIVE_VEL = 0;
  public static final double MAX_SPEED_METERS_PER_SECOND = 0;
  public static final double MAX_ACCELERATION_METERS_PER_SECOND_SQUARED = 0;

  public static final double TRACK_WIDTH_METERS = 0;
  public static final DifferentialDriveKinematics DRIVE_KINEMATICS = new DifferentialDriveKinematics(
      TRACK_WIDTH_METERS);

  public static final double HALL_EFFECT_SENSOR_TRIGGERED = 2.5;

  public static final double COMMUNITY_SHOOTER_SPEED = .95;
  public static final double L2_SHOOTER_SPEED = .5;
  public static final double L1_SHOOTER_SPEED = .25;
}
