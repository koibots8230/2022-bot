/* RobotBuilder Version: 5.0

This file was generated by RobotBuilder. It contains sections of
code that are automatically generated and assigned by robotbuilder.
These sections will be updated in the future when you export to
Java from RobotBuilder. Do not put any code or make any change in
the blocks indicating autogenerated code or it will be lost on an
update. Deleting the comments indicating the section will prevent
it from being updated in the future.

ROBOTBUILDER TYPE: RobotContainer. */

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.PS4Controller;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj2.command.button.CommandGenericHID;
import edu.wpi.first.wpilibj2.command.button.CommandPS4Controller;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;

import java.util.function.DoubleSupplier;

import frc.robot.subsystems.IntakeSubsystem;
import frc.robot.subsystems.ShooterSubsystem.CommunityShotCommand;
import frc.robot.commands.IntakeCommand;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {
  private static RobotContainer m_robotContainer = new RobotContainer();
  
  SendableChooser<Boolean> m_sideChooser = new SendableChooser<>();
  // Subsystems
  public final TankDriveSubsystem m_tankDriveSubsystem = new TankDriveSubsystem();
  public final IntakeSubsystem m_intake = new IntakeSubsystem();

  public final ShooterSubsystem m_ShooterSubsystem = new ShooterSubsystem();

  //LED system 
  private final LEDsystem LEDstrips = new LEDsystem(Constants.LEDPort1);//addressable LED only works from one port.
  //public final VisionSubsystem m_VisionSubsystem = new VisionSubsystem(m_sideChooser.getSelected());
  private MiscDashboardSubsystem m_miscDashboardSubsystem = new MiscDashboardSubsystem(m_intake, m_ShooterSubsystem);

  // other stuff
  private final CommandXboxController m_driverHID = new CommandXboxController(0);
  private final CommandPS4Controller m_operatorHID = new CommandPS4Controller(1);

  private DoubleSupplier leftDriveTrain = () -> m_driverHID.getLeftY();
  private DoubleSupplier rightDriveTrain = () -> m_driverHID.getRightY();

  private final TankDriveSubsystem.driveMotorCommand m_driveCommand = m_tankDriveSubsystem.new driveMotorCommand(
      rightDriveTrain,
      leftDriveTrain,
      m_tankDriveSubsystem);

  SendableChooser<Command> m_autoChooser = new SendableChooser<>(); 

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private void configureButtonBindings() {
    m_tankDriveSubsystem.setDefaultCommand(m_driveCommand);

    // ==================OPERATOR CONTROLS======================================

    // Create Triggers here | Triggers should be named t_CommandName

    Trigger operatorSpeedUp = m_operatorHID.cross();
    Trigger operatorSpeedDown = m_operatorHID.circle();
    Trigger leftTrigger_op = m_operatorHID.axisGreaterThan(PS4Controller.Axis.kL2.value, Constants.DEADZONE);
    Trigger rightTrigger_op = m_operatorHID.axisGreaterThan(PS4Controller.Axis.kR2.value, Constants.DEADZONE);
    rightTrigger_op.whileTrue(new setLedColor(LEDstrips,Constants.Shape.CUBE));
    leftTrigger_op.whileTrue(new setLedColor(LEDstrips,Constants.Shape.CONE));

    operatorSpeedUp.onTrue(new setSpeedCommand(true, m_tankDriveSubsystem));
    operatorSpeedDown.onTrue(new setSpeedCommand(false, m_tankDriveSubsystem));

    Trigger intakeMoveUp = m_operatorHID.axisGreaterThan(PS4Controller.Axis.kLeftY.value, -Constants.DEADZONE);
    Trigger intakeMoveDown = m_operatorHID.axisLessThan(PS4Controller.Axis.kLeftY.value, Constants.DEADZONE);
    intakeMoveUp.whileTrue(new InstantCommand(() -> m_intake.setRaiseIntakeSpeed(0.3), m_intake));
    intakeMoveDown.whileTrue(new InstantCommand(() -> m_intake.setRaiseIntakeSpeed(-0.3), m_intake));
    intakeMoveUp.or(intakeMoveDown).onFalse(new InstantCommand(() -> m_intake.setRaiseIntakeSpeed(0), m_intake));



    // ================DRIVER CONTROLS==========================================
    // create commands
    // 5 = left bumper
    // 6 = right bumper

    Trigger shootTrigger = m_driverHID.axisGreaterThan(XboxController.Axis.kLeftTrigger.value, Constants.DEADZONE);
    CommunityShotCommand com_shot_cmd = m_ShooterSubsystem.new CommunityShotCommand(m_ShooterSubsystem);
    shootTrigger.whileTrue(com_shot_cmd);
    
    // Intake is toggled when left bumper is pressed
    Trigger flipTrigger = m_driverHID.leftBumper();
    flipTrigger.onTrue(m_intake.new FlipIntake(m_intake));

    // Intake runs FORWARD when right trigger is pressed
    Trigger runIntakeForwardsTrigger = m_driverHID.rightTrigger(Constants.DEADZONE);
    runIntakeForwardsTrigger.whileTrue(new IntakeCommand(m_intake, true));

    // Intake runs BACKWARD when right bumper is pressed
    Trigger runIntakeBackwardsTrigger = m_driverHID.rightBumper();
    runIntakeBackwardsTrigger.whileTrue(new IntakeCommand(m_intake, false));
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }
    /**
     * The container for the robot. Contains subsystems, OI devices, and commands.
     */
    private RobotContainer() {
        configureButtonBindings();
    }

  public CommandGenericHID getController() {
    return m_driverHID;
  }

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    return m_autoChooser.getSelected();
  }
}