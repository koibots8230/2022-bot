// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.subsystems.TankDriveSubsystem.driveMotorCommand;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;
import edu.wpi.first.wpilibj2.command.button.CommandGenericHID;
import edu.wpi.first.wpilibj2.command.button.CommandJoystick;
import edu.wpi.first.wpilibj2.command.button.Trigger;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import edu.wpi.first.wpilibj2.command.InstantCommand;

import java.io.File;
import java.util.Scanner;
import java.util.function.BooleanSupplier;
import java.util.function.DoubleSupplier;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// Subsystems
  public final TankDriveSubsystem m_tankDriveSubsystem = new TankDriveSubsystem();
  //public final ClawSubsytem m_clawSubsytemBase = new ClawSubsytem(); | Not on robot
  //public final IntakeSubsystem m_intake = new IntakeSubsystem(); | Not on robot
  //public final VisionSubsystem m_VisionSubsystem = new VisionSubsystem();

// Joysticks
  private final CommandGenericHID m_driverHID = new CommandGenericHID(0);

// Commands
  private final driveMotorCommand m_driveCommand = m_tankDriveSubsystem. new driveMotorCommand(
    () -> m_driverHID.getRawAxis(0), 
    () -> m_driverHID.getRawAxis(5),
    m_tankDriveSubsystem
    );

  SendableChooser<Command> m_autoChooser = new SendableChooser<>();
  SendableChooser<String> m_driverChooser = new SendableChooser<>();
  
  // m_controllerType 0 -> Unrecognized
  // m_controllerType 1 -> Xbox Controller
  // m_controllerType 2 -> Playstation Controller
  // m_controllerType 3 -> Flight Joystick
  int m_controllerType;


  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    //m_driverChooser.setDefaultOption("DEFAULT", null);
    //m_driverChooser.addOption("Caleb", null);
    
    m_tankDriveSubsystem.setDefaultCommand(m_driveCommand);

    //configureButtonBindings();
/* 
    int pairButton;
    String hidType = m_driverHID.getHID().getName();
    if (hidType.equals("")) { // Xbox Controller | Name Unknown
      m_controllerType = 1;
      pairButton = -1;
    } else if (hidType.equals("Wireless Controller")) { // PS5 | Is still called "Wireless Controller" if plugged in with a wire.
      m_controllerType = 2;
      pairButton = -1;
    } else if (hidType.equals("")) { // Flight Stick | Name unkown
      m_controllerType = 3;
      pairButton = -1;
    } else {
      m_controllerType = 0;
      pairButton = -1;
    }

    Trigger resetControls = m_driverHID.button(pairButton);
    */
  }


  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */

  private void configureButtonBindings() {
    CommandScheduler.getInstance().clearComposedCommands();
    
    File profile = new File(Filesystem.getDeployDirectory(), m_driverChooser.getSelected() + ".txt");
    
    try {
      Scanner driverProfile = new Scanner(profile);
      // Create Triggers here | Triggers should be named t_CommandName
      
      //BooleanSupplier exampleSupplier = () -> true;
      //Trigger t_exampleCommand = new Trigger(exampleSupplier);

      driverProfile.close();
    } catch(Exception primaryError) {
      System.out.print(primaryError);
      }
    }
  
    public static RobotContainer getInstance() {
      return m_robotContainer;
    }
  

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public CommandGenericHID getController() {
      return m_driverHID;
    }




    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS


  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_autoChooser.getSelected();
  }
  

}

