// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;
import edu.wpi.first.wpilibj2.command.button.CommandGenericHID;
import edu.wpi.first.wpilibj2.command.button.CommandJoystick;
import edu.wpi.first.wpilibj2.command.button.Trigger;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.CommandScheduler;

import edu.wpi.first.wpilibj2.command.RamseteCommand;

import java.io.File;
import java.util.Scanner;
import java.util.function.BooleanSupplier;

import com.pathplanner.lib.PathConstraints;
import com.pathplanner.lib.PathPlanner;
import com.pathplanner.lib.PathPlannerTrajectory;
import com.pathplanner.lib.PathPoint;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.RamseteController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// Subsystems
  public final TankDriveSubsystem m_tankDriveSubsystem = new TankDriveSubsystem();
  //public final VisionSubsystem m_VisionSubsystem = new VisionSubsystem();

// Joysticks
  private final CommandGenericHID driverHID = new CommandGenericHID(0);
  
  PathPlannerTrajectory trajectory = PathPlanner.generatePath(
            new PathConstraints(4, 3), 
            new PathPoint(new Translation2d(1.0, 1.0), Rotation2d.fromDegrees(0)), // position, heading
            new PathPoint(new Translation2d(3.0, 3.0), Rotation2d.fromDegrees(45)) // position, heading
);  

// Commands
  
  private final TankDriveSubsystem.driveMotorCommand m_driveCommand = m_tankDriveSubsystem. new driveMotorCommand(
    () -> m_driverHID.getRawAxis(1), 
    () -> m_driverHID.getRawAxis(5),
    m_tankDriveSubsystem
    );

  SendableChooser<Command> m_autoChooser = new SendableChooser<>();
  SendableChooser<String> m_driverChooser = new SendableChooser<>();
  
  // m_controllerType 0 -> Unrecognized
  // m_controllerType 1 -> Xbox Controller
  // m_controllerType 2 -> Playstation Controller
  // m_controllerType 3 -> Flight Joystick
  int m_controllerType = 0;

  // Triggers

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  private RobotContainer() {
    //m_driverChooser.setDefaultOption("DEFAULT", null);
    //m_driverChooser.addOption("Caleb", null);

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

    configureButtonBindings();

    int pairButton;
    String hidType = m_driverHID.getHID().getName();
    if (hidType.equals("")) { // Xbox Controller | Name Unknown
      m_controllerType = 1;
      pairButton = 7;
    } else if (hidType.equals("Wireless Controller")) { // PS5 | Is still called "Wireless Controller" if plugged in with a wire.
      m_controllerType = 2;
      pairButton = 7;
    } else {
      m_controllerType = 0;
      pairButton = 7;
    }

    Trigger resetControls = m_driverHID.button(pairButton)
      .whileTrue(new setupControls());

    
  }
  class setupControls extends CommandBase {
    @Override
    public void execute() {
      configureButtonBindings();
    }

    @Override
    public boolean isFinished() {
        return true;
    }
  }

    private void configureButtonBindings() {
      m_tankDriveSubsystem.setDefaultCommand(m_driveCommand);
    }
  
    public static RobotContainer getInstance() {
      return m_robotContainer;
    }
  

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public CommandGenericHID getController() {
      return m_driverHID;
    }




    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS


  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    RamseteCommand ramseteCommand =
        new RamseteCommand(
            trajectory,
            m_VisionSubsystem::getPose,
            new RamseteController(),
            new SimpleMotorFeedforward(
                Constants.KS,
                Constants.KV,
                Constants.KA),
            Constants.KDRIVEKINEMATICS,
            m_tankDriveSubsystem::getWheelSpeeds,
            new PIDController(Constants.KPDRIVEVEL, 0, 0),
            new PIDController(Constants.KPDRIVEVEL, 0, 0),
            // RamseteCommand passes volts to the callback
            m_tankDriveSubsystem::tankDriveVolts,
            m_tankDriveSubsystem);

    return m_autoChooser.getSelected();
  }
}

