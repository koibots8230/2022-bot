/* RobotBuilder Version: 5.0

This file was generated by RobotBuilder. It contains sections of
code that are automatically generated and assigned by robotbuilder.
These sections will be updated in the future when you export to
Java from RobotBuilder. Do not put any code or make any change in
the blocks indicating autogenerated code or it will be lost on an
update. Deleting the comments indicating the section will prevent
it from being updated in the future.

ROBOTBUILDER TYPE: RobotContainer. */

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import java.util.function.BooleanSupplier;

import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj2.command.button.CommandGenericHID;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import frc.robot.subsystems.IntakeSubsystem;
import frc.robot.subsystems.IntakeSubsystem.SwitchIntakeDirection;
import frc.robot.subsystems.TankDriveSubsystem.SwitchDrivetrainInvert;
import frc.robot.commands.IntakeCommand;
import edu.wpi.first.wpilibj.Filesystem;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

import com.pathplanner.lib.PathConstraints;
import com.pathplanner.lib.PathPlanner;
import com.pathplanner.lib.PathPlannerTrajectory;
import com.pathplanner.lib.PathPoint;
import com.pathplanner.lib.auto.PIDConstants;
import com.pathplanner.lib.auto.RamseteAutoBuilder;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.RamseteController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.wpilibj.Filesystem;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {
    private static RobotContainer m_robotContainer = new RobotContainer();
    // Subsystems
    public final TankDriveSubsystem m_tankDriveSubsystem = new TankDriveSubsystem();
    public final IntakeSubsystem m_intake = new IntakeSubsystem();
    private static MiscDashboardSubsystem m_miscDashboardSubsystem = new MiscDashboardSubsystem();

    // other stuff
    private final CommandGenericHID m_driverHID = new CommandGenericHID(0);
    private final CommandGenericHID m_operatorHID = new CommandGenericHID(1);

    // Commands
    private final TankDriveSubsystem.driveMotorCommand m_driveCommand = m_tankDriveSubsystem.new driveMotorCommand(
            () -> m_driverHID.getRawAxis(1),
            () -> m_driverHID.getRawAxis(5),
            m_tankDriveSubsystem);

    private final TankDriveSubsystem.driveMotorCommand m_operatorDrive = m_tankDriveSubsystem.new driveMotorCommand(
            () -> m_operatorHID.getRawAxis(1),
            () -> m_operatorHID.getRawAxis(5),
            m_tankDriveSubsystem);

    // Drivetrain is reversed when button A is pressed on the controller:
    SwitchDrivetrainInvert m_SwitchDrivetrainInvertCommand = m_tankDriveSubsystem.new SwitchDrivetrainInvert(
            m_tankDriveSubsystem);
    Trigger invertDrivetrainTrigger = m_driverHID.button(1)
            .onTrue(m_tankDriveSubsystem.new SwitchDrivetrainInvert(m_tankDriveSubsystem));

    AutoShootCommand m_HighAutoShootCommand = new AutoShootCommand(false, true);
    AutoShootCommand m_MidAutoShootCommand = new AutoShootCommand(true, false);
    
    SendableChooser<Command> m_autoChooser = new SendableChooser<>();
    SendableChooser<String> m_driverChooser = new SendableChooser<>();
    SendableChooser<Boolean> m_isBalancing = new SendableChooser<>();
    SendableChooser<Boolean> m_isRight = new SendableChooser<>();
    
    // m_controllerType 0 -> Unrecognized
    // m_controllerType 1 -> Xbox Controller
    // m_controllerType 2 -> Playstation Controller
    // m_controllerType 3 -> Flight Joystick
    int m_controllerType;

    Command auto;
    
    /**
     * The container for the robot. Contains subsystems, OI devices, and commands.
     */
    private RobotContainer() {
        configureButtonBindings();

        List<PathPlannerTrajectory> traj = null;
        if (m_isBalancing.getSelected()) {
            traj = PathPlanner.loadPathGroup("Center(Balance)", 4, 5);
        } else {
            if (m_isRight.getSelected()) {
                traj = PathPlanner.loadPathGroup("Right", 4, 3);
            } else if (m_isRight.getSelected() == false) {
                traj = PathPlanner.loadPathGroup("Left", 4, 3);
            }
        }

        HashMap<String, Command> eventMap = new HashMap<>();
        eventMap.put("IntakeSpin", m_intake.new ShortIntakeSpin(m_intake));
        eventMap.put("IntakeMove", m_intake.new FlipIntake(m_intake));
        eventMap.put("ShootHigh", m_HighAutoShootCommand);
        eventMap.put("ShootMid", m_MidAutoShootCommand);
        

        RamseteAutoBuilder autoBuilder = new RamseteAutoBuilder(
            m_tankDriveSubsystem::getOdometryPose,
            m_tankDriveSubsystem::resetOdometry,
            new RamseteController(), 
            Constants.kDriveKinematics, 
            new SimpleMotorFeedforward(Constants.ksVolts, Constants.kvVoltSecondsPerMeter, Constants.kaVoltSecondsSquaredPerMeter),
            m_tankDriveSubsystem::getWheelSpeeds, 
            new PIDConstants(Constants.kPDriveVel, 0, 0),
            m_tankDriveSubsystem::setMotorVoltage,
            eventMap,
            true,
            m_tankDriveSubsystem
            );
        if (traj != null) {
            auto = autoBuilder.fullAuto(traj);
        }
        int pairButton;
        String hidType = m_driverHID.getHID().getName();
        if (hidType.equals("")) { // Xbox Controller | Name Unknown
            m_controllerType = 1;
            pairButton = 7;
        } else if (hidType.equals("Wireless Controller")) { // PS5 | Is still called "Wireless Controller" if plugged in with a wire.
            m_controllerType = 2;
            pairButton = 7;
        } else {
            m_controllerType = 0;
            pairButton = 7;
        }

        File profile = new File(Filesystem.getDeployDirectory(), m_driverChooser.getSelected() + ".txt");

        try {
            Scanner driverProfile = new Scanner(profile);

            // ==================OPERATOR CONTROLS======================================

            // Create Triggers here | Triggers should be named t_CommandName
            Trigger leftTrigger = m_operatorHID.axisGreaterThan(3, Constants.DEADZONE);
            Trigger rightTrigger = m_operatorHID.axisGreaterThan(4, Constants.DEADZONE);

            Trigger operatorDriveTrigger = m_operatorHID.axisGreaterThan(1, 0.1);
            operatorDriveTrigger.onTrue(m_operatorDrive);

            Trigger operatorSpeedUp = m_operatorHID.button(2);
            Trigger operatorSpeedDown = m_operatorHID.button(3);
            operatorSpeedUp.onTrue(new setSpeedCommand(true, m_tankDriveSubsystem));
            operatorSpeedDown.onTrue(new setSpeedCommand(false, m_tankDriveSubsystem));

            Trigger intakeMoveUp = m_operatorHID.axisGreaterThan(1, 0.1);
            Trigger intakeMoveDown = m_operatorHID.axisLessThan(1, -0.1);
            intakeMoveUp.whileTrue(new InstantCommand(() -> m_intake.setRaiseIntakeSpeed(0.1), m_intake));
            intakeMoveDown.whileTrue(new InstantCommand(() -> m_intake.setRaiseIntakeSpeed(-0.1), m_intake));
            intakeMoveUp.onFalse(new InstantCommand(() -> m_intake.setRaiseIntakeSpeed(0), m_intake));
            intakeMoveDown.onFalse(new InstantCommand(() -> m_intake.setRaiseIntakeSpeed(0), m_intake));

            // ================DRIVER CONTROLS==========================================
            // create commands
            // 5 = left bumper
            // 6 = right bumper

            // Intake is toggled when left bumper is pressed
            Trigger flipTrigger = m_driverHID.button(5);
            flipTrigger.onTrue(m_intake.new FlipIntake(m_intake));

            // Intake runs when right trigger is pressed
            BooleanSupplier m_turnOnIntake = m_driverHID.axisGreaterThan(3, 0.1);
            IntakeCommand m_IntakeCommand = new IntakeCommand(m_intake, m_turnOnIntake);
            Trigger runIntakeTrigger = m_driverHID.button(3);
            runIntakeTrigger.onTrue(m_IntakeCommand);

            // Intake is reversed when right bumper is pressed
            SwitchIntakeDirection m_switchIntake = m_intake.new SwitchIntakeDirection(m_intake);
            Trigger switchIntakeTrigger = m_driverHID.button(6);
            switchIntakeTrigger.onTrue(m_switchIntake);

            // Trigger to reset the controls
            Trigger resetControls = m_driverHID.button(pairButton);
            resetControls.whileTrue(new setupControls());

            driverProfile.close();
        } catch (Exception primaryError) {
            System.out.print(primaryError);
        }
    }

    class setupControls extends CommandBase {
        @Override
        public void execute() {
            configureButtonBindings();
        }

        @Override
        public boolean isFinished() {
            return true;
        }
    }


    private void configureButtonBindings() {
        m_tankDriveSubsystem.setDefaultCommand(m_driveCommand);
    }

    public static RobotContainer getInstance() {
        return m_robotContainer;
    }
    


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public CommandGenericHID getController() {
      return m_driverHID;

  }
  
  public Command getAutonomousCommand(){
    return auto;
  }

  public Integer getWhichPath() {
    if(m_isBalancing.getSelected()) { 
        return 2;
    } else {
        if (m_isRight.getSelected()) {
            return 1;
        } else if (m_isRight.getSelected() == false) {
            return 3;
        }
    }
    return null;
  }
}
