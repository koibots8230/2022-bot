// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: PIDCommand.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import java.util.function.DoubleSupplier;
import edu.wpi.first.wpilibj2.command.PIDCommand;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.XboxController;
import frc.robot.subsystems.IntakeSubsystem;
import frc.robot.subsystems.TankDriveSubsystem;
import frc.robot.Constants;

public class PIDSetMotor extends PIDCommand {

    public PIDSetMotor(double targetMotorSpeed, TankDriveSubsystem drive, String LR, XboxController xbox, int m_controlAxis) {
        super(
            // Controller used by the loop
            new PIDController(Constants.kp, Constants.ki, Constants.kd),
            // Close loop when the speed is...
            () -> drive.getMotorSpeed(LR),
            // ...targetMotorSpeed!
            targetMotorSpeed,
            // Pipe output to change robot speed
            output -> {
                boolean slowMo = xbox.getRightBumperPressed();
                double adjOutput;
                if (slowMo) {
                    adjOutput = output * Constants.slowMoFactor;
                } else {
                    adjOutput = output;
                }
                drive.setMotor(LR, adjOutput);
            },
            // Require the drive
            drive);
    }

    //It's time for parameter overloading! PIDSetMotor with the intake:
    public PIDSetMotor(double targetMotorSpeed, IntakeSubsystem intake, XboxController xbox, int m_controlAxis) {
        super(
            //Controller used:
            new PIDController(Constants.kp, Constants.ki, Constants.kd),
            //Method of measurement:
            () -> intake.getIntakeSpeed(),
            // The setPoint:
            targetMotorSpeed,
            //Change the intake speed accordingly:
            output -> {
                intake.setIntakeSpeed(targetMotorSpeed);
            },
        intake
        );
    }
    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
