// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.Constants;
import edu.wpi.first.wpilibj.AddressableLED;
import edu.wpi.first.wpilibj.AddressableLEDBuffer;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
 
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class LEDsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private AddressableLED strip1;
private AddressableLED strip2;
private AddressableLEDBuffer buffer;
private boolean state = false;//cone = false, box = cube.
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public LEDsystem(int port1,int port2 ) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        strip1=new AddressableLED(port1);
        strip2=new AddressableLED(port2);
        buffer= new AddressableLEDBuffer(Constants.stripLength);//this length is the number of LEDs on each strip.
        strip1.setLength(buffer.getLength());
        strip2.setLength(buffer.getLength());
        strip1.setData(buffer);
        strip2.setData(buffer);
        //I'm not 100% what start actually does but the doc makes it seem needed.
        strip1.start();
        strip2.start();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }
    public void toggleColor(){
        state=!state;
        if(state){
            for (var i = 0; i < buffer.getLength(); i++) {
            // Sets the specified LED to the RGB values for purple
            buffer.setRGB(i, 255, 0, 255);
            }
        } else {
            for (var i = 0; i < buffer.getLength(); i++) {
                // Sets the specified LED to the RGB values for green
                buffer.setRGB(i, 255, 255, 0);
            }
        }
        strip1.setData(buffer);
        strip2.setData(buffer);
    }
    public void turnOff(){
        for (var i = 0; i < buffer.getLength(); i++) {
            // Sets the specified LED to the RGB values for green
            buffer.setRGB(i, 0, 0, 0);
        }
        strip1.setData(buffer);
        strip2.setData(buffer);
    }
    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

