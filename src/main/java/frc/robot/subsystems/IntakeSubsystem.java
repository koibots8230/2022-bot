// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import edu.wpi.first.util.sendable.Sendable;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PneumaticsModuleType;

import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;

import edu.wpi.first.wpilibj.Solenoid;
import frc.robot.Constants;
import edu.wpi.first.wpilibj.Compressor;

public class IntakeSubsystem extends SubsystemBase {
    private final CANSparkMax intakeMotor;
    private final RelativeEncoder intakeEncoder;
    private final double RUNNING_SPEED = .7;

    private final DoubleSolenoid intakeSolenoid;
    private final Compressor intakeComp;
    public IntakeSubsystem() {
        intakeMotor = new CANSparkMax(Constants.kIntakeMotorPort, MotorType.kBrushless);
        intakeMotor.setInverted(false);
        intakeEncoder = intakeMotor.getEncoder();
        intakeComp = new Compressor(PneumaticsModuleType.CTREPCM);
        intakeSolenoid = new DoubleSolenoid(PneumaticsModuleType.CTREPCM, 0, 1);
        intakeComp.disable();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        double velocity = intakeEncoder.getVelocity();
        double current = intakeMotor.getOutputCurrent(); 
        SmartDashboard.putNumber("Intake Speed (RPM)", velocity);
        SmartDashboard.putNumber("Motor Current (A)", current);
    }

    @Override
    public void simulationPeriodic() {
    }

    public void turnOn() {
        intakeMotor.set(RUNNING_SPEED);
    }

    public void turnOn(Boolean Forwards) {
        if (Forwards){
            intakeMotor.set(RUNNING_SPEED);
        } else {
            intakeMotor.set(-RUNNING_SPEED);
        }
    }

    public void turnOff() {
        intakeMotor.set(0);
    }

    public DoubleSolenoid getSolenoid() {
        return intakeSolenoid;
    }

    public Compressor getComp() {
        return intakeComp;
    }

    public class RaiseIntake extends CommandBase {
        IntakeSubsystem m_intake;

        public RaiseIntake(IntakeSubsystem subsystem) {
            m_intake = subsystem;
            addRequirements(m_intake);
        }

        @Override
        public void initialize() {
            if (!m_intake.getComp().isEnabled()) {
                m_intake.getComp().enableDigital();
            }
        }

        @Override
        public void execute() {
            m_intake.getSolenoid().set(DoubleSolenoid.Value.kForward);
        }

        @Override
        public boolean isFinished() {
            return true;
        }
    }

    public class LowerIntake extends CommandBase {
        IntakeSubsystem m_intake;

        public LowerIntake(IntakeSubsystem subsystem) {
            m_intake = subsystem;
            addRequirements(m_intake);
        }

        @Override
        public void initialize() {
            if (!m_intake.getComp().isEnabled()) {
                m_intake.getComp().enableDigital();
            }
        }

        @Override
        public void execute() {
            m_intake.getSolenoid().set(DoubleSolenoid.Value.kReverse);
        }

        @Override
        public boolean isFinished() {
            return true;
        }
    }
}