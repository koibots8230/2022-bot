// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import frc.robot.Constants;

public class IntakeSubsystem extends SubsystemBase {
    private final CANSparkMax intakeMotor;
    private final RelativeEncoder intakeEncoder;

    private final CANSparkMax firstConveyer;
    private final RelativeEncoder conveyerEncoder;
    private final CANSparkMax leftStarWheelsMotor;
    private final CANSparkMax rightStarWheelsMotor;

    // This motor raises and lowers the intake:
    private final CANSparkMax raiseIntakeMotor;
    private final RelativeEncoder raiseIntakeEncoder;

    private double intakePosition; // This variable refers to the incline of the intake IN DEGREES

    private final AnalogInput topHallEffectSensor;
    private final AnalogInput bottomHallEffectSensor;

    public IntakeSubsystem() {
        intakeMotor = new CANSparkMax(Constants.INTAKE_MOTOR, MotorType.kBrushless);
        intakeMotor.setInverted(false);
        intakeEncoder = intakeMotor.getEncoder();

        firstConveyer = new CANSparkMax(Constants.MIDTAKE_MOTOR, MotorType.kBrushless); 
        firstConveyer.setInverted(false);
        conveyerEncoder = firstConveyer.getEncoder();

        rightStarWheelsMotor = new CANSparkMax(Constants.STAR_WHEELS_MOTOR_L, MotorType.kBrushless);
        rightStarWheelsMotor.setInverted(true);
        leftStarWheelsMotor = new CANSparkMax(Constants.STAR_WHEELS_MOTOR_R, MotorType.kBrushless);
        leftStarWheelsMotor.setInverted(true);
        leftStarWheelsMotor.follow(rightStarWheelsMotor);

        // raiseIntakeMotor:
        raiseIntakeMotor = new CANSparkMax(Constants.RAISE_INTAKE_MOTOR, MotorType.kBrushless);
        raiseIntakeMotor.setInverted(false);
        raiseIntakeEncoder = raiseIntakeMotor.getEncoder();
        raiseIntakeEncoder.setPosition(0);
        intakePosition = 0;

        // Hall effect sensors
        topHallEffectSensor = new AnalogInput(0); // Change port number when testing the code
        bottomHallEffectSensor = new AnalogInput(1); // Change port numer when testing the code
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        double inVelocity = intakeEncoder.getVelocity();
        double InCurrent = intakeMotor.getOutputCurrent(); 
        SmartDashboard.putNumber("Intake Motor Speed (RPM)", inVelocity);
        SmartDashboard.putNumber("Main Battery Current (A)", InCurrent);
        double midVelocity = conveyerEncoder.getVelocity();
        double midCurrent = firstConveyer.getOutputCurrent();
        SmartDashboard.putNumber("Midtake Motor Current (A)", midCurrent);
        SmartDashboard.putNumber("Midtake Motor Speed (RPM)", midVelocity);

    }

    @Override
    public void simulationPeriodic() {
    }

    public void turnOn() {
        intakeMotor.set(Constants.RUNNING_SPEED);
        firstConveyer.set(Constants.RUNNING_SPEED);
        rightStarWheelsMotor.set(Constants.RUNNING_SPEED);
    }

    public void turnOn(Boolean Forwards) {
        if (Forwards){
            intakeMotor.set(-Constants.RUNNING_SPEED);
            firstConveyer.set(Constants.RUNNING_SPEED);
            rightStarWheelsMotor.set(Constants.RUNNING_SPEED);
        } else {
            intakeMotor.set(Constants.RUNNING_SPEED);
            firstConveyer.set(-Constants.RUNNING_SPEED);
            rightStarWheelsMotor.set(-Constants.RUNNING_SPEED);
        }
    }

    public void turnOff() {
        intakeMotor.set(0);
        firstConveyer.set(0);
        rightStarWheelsMotor.set(0);
    }

    public double getRaiseMotorCurrent() {
        return raiseIntakeMotor.getOutputCurrent();
    }

    public double getIntakePosition() {
        return intakePosition;
    }

    public void setRaiseIntakeSpeed(double speed){
        raiseIntakeMotor.set(speed);
    }

    public RelativeEncoder getRaiseEncoder() {
        return raiseIntakeEncoder;
    }

    public CANSparkMax getIntakeRaiseMotor() {
        return raiseIntakeMotor;
    }

    public AnalogInput getHallEffectSensor() {
        // Returns the correct hall effect sensor based off current intake state:
        if (topHallEffectSensor.getVoltage() > Constants.HALL_EFFECT_SENSOR_TRIGGERED) {
            return bottomHallEffectSensor;
            // If the top hall effect sensor is triggered, it means that the intake is top.
            // Assuming that we want to go down, the function returns the BOTTOM sensor.
        } else if (bottomHallEffectSensor.getVoltage() > Constants.HALL_EFFECT_SENSOR_TRIGGERED) {
            return topHallEffectSensor;
            // The OPPOSITE goes for the top sensor.
        } else {
            return bottomHallEffectSensor;
        }
    }

    public class FlipIntake extends CommandBase {
        IntakeSubsystem m_intake;
        boolean end = false;
        AnalogInput hallEffectSensor;

        public FlipIntake(IntakeSubsystem subsystem) {
            m_intake = subsystem;
            addRequirements(m_intake);
        }

        @Override
        public void initialize() {
            System.out.println("Intake is moving");
            hallEffectSensor = m_intake.getHallEffectSensor();
            if (hallEffectSensor == topHallEffectSensor) {
                m_intake.setRaiseIntakeSpeed(Constants.RAISE_SPEED);
            } else if (hallEffectSensor == bottomHallEffectSensor) {
                m_intake.setRaiseIntakeSpeed(-Constants.RAISE_SPEED);
            }
        }

        @Override
        public void execute() {
            if (Math.abs(m_intake.getRaiseMotorCurrent()) > Constants.CURRENT_ZONE_AMPS || hallEffectSensor.getVoltage() > Constants.HALL_EFFECT_SENSOR_TRIGGERED) {
                if (m_intake.getRaiseEncoder().getPosition() > Constants.INTAKE_UP_POSITION || m_intake.getRaiseEncoder().getPosition() < Constants.INTAKE_DOWN_POSITION) {
                m_intake.setRaiseIntakeSpeed(0);
                end = true;
                } else {
                    return;
                }
            } 
        }

        @Override
        public boolean isFinished() {
            return end;
        }

        @Override
        public void end(boolean interrupted) {
        }
    }
}