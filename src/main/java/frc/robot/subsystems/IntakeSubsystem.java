// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import com.revrobotics.CANSparkMax;
import frc.robot.Constants;

public class IntakeSubsystem extends SubsystemBase {
    private static IntakeSubsystem m_IntakeSubsystem = new IntakeSubsystem();

    private final CANSparkMax intakeMotor;

    public IntakeSubsystem() {
        intakeMotor = new CANSparkMax(Constants.INTAKE_MOTOR, MotorType.kBrushless);
    }

    public static IntakeSubsystem getIntakeSubsystem() {
        return m_IntakeSubsystem;
    }

    public void setIntakeSpeed(double speed) {
        intakeMotor.set(speed);
    }

    public void ClearStickies() {
        intakeMotor.clearFaults();
    }
    // ================================Commands================================

    public class RunIntake extends CommandBase {
        public RunIntake() {
            addRequirements(IntakeSubsystem.this);
        }

        @Override
        public void initialize() {
            IntakeSubsystem.this.setIntakeSpeed(Constants.INTAKE_RUNNING_SPEED);
        }

        @Override
        public boolean isFinished() {
            return false;
        }

        @Override
        public void end(boolean interrupted) {
            IntakeSubsystem.this.setIntakeSpeed(0);
        }
    }

    public class RunIntakeReverse extends CommandBase {
        public RunIntakeReverse() {
            addRequirements(IntakeSubsystem.this);
        }

        @Override
        public void initialize() {
            IntakeSubsystem.this.setIntakeSpeed(-Constants.INTAKE_RUNNING_SPEED);
        }

        @Override
        public boolean isFinished() {
            return false;
        }

        @Override
        public void end(boolean interrupted) {
            IntakeSubsystem.this.setIntakeSpeed(0);
        }
    }
}